name: Update Jupiter Perpetuals Volume Data

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch: # Allow manual triggers
    inputs:
      backfill_days:
        description: 'Number of days to backfill (optional)'
        required: false
        default: '1'

permissions:
  contents: write  # This allows the action to push commits

jobs:
  update-volume:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install axios csv-parser csv-writer
        
    - name: Update volume data
      run: |
        cat << 'EOF' > update_volume.js
        const axios = require('axios');
        const fs = require('fs');
        const csv = require('csv-parser');
        const csvWriter = require('csv-writer');

        // Jupiter API configuration
        const TOKENS = [
          'So11111111111111111111111111111111111111112', // SOL
          '3NZ9JMVBmGAqocybic2c7LQCJScmgsAZ6vQqTDzcqmJh', // WBTC
          '7vfCXTUXx5WJV5JADk17DUJ4ksgau7utNKj4b963voxs'  // ETH
        ];

        const HEADERS = {
          'accept': '*/*',
          'accept-language': 'en-US,en;q=0.9',
          'content-type': 'application/json',
          'referrer': 'https://www.jup.ag/',
          'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        };

        async function fetchVolumeForToken(token) {
          const url = `https://perps-api.jup.ag/v1/market-stats?mint=${token}`;
          try {
            const response = await axios.get(url, { headers: HEADERS });
            
            // Log response structure for debugging
            console.log(`API Response for ${token}:`, JSON.stringify(response.data, null, 2));
            
            // Try different possible volume field names
            const volume = response.data?.volume24h || 
                          response.data?.dailyVolume || 
                          response.data?.volume || 
                          response.data?.stats?.volume24h ||
                          response.data?.stats?.dailyVolume ||
                          0;
            
            // Extract date from response headers
            const dateHeader = response.headers['date'] || response.headers['Date'];
            let apiDate = null;
            
            if (dateHeader) {
              const parsedDate = new Date(dateHeader);
              apiDate = parsedDate.toISOString().split('T')[0];
            }
            
            console.log(`Extracted volume for ${token}: ${volume}`);
            
            return {
              volume: volume,
              date: apiDate,
              dateHeader: dateHeader,
              token: token
            };
          } catch (error) {
            console.error(`Error fetching volume for ${token}:`, error.message);
            if (error.response) {
              console.error(`Response status: ${error.response.status}`);
              console.error(`Response data:`, error.response.data);
            }
            return { volume: 0, date: null, dateHeader: null, token: token };
          }
        }

        async function getTotalVolumeWithDate() {
          console.log('Fetching volume data from Jupiter v1/market-stats API...');
          const results = await Promise.all(TOKENS.map(fetchVolumeForToken));
          
          // Extract volumes and dates
          const volumes = results.map(r => r.volume);
          const dates = results.map(r => r.date).filter(d => d !== null);
          const dateHeaders = results.map(r => r.dateHeader).filter(d => d !== null);
          
          const totalVolume = volumes.reduce((sum, vol) => sum + vol, 0);
          
          // Log individual volumes for debugging
          results.forEach(result => {
            console.log(`${result.token}: ${result.volume}`);
          });
          
          // Determine the actual date from API response headers
          let apiDate = null;
          
          if (dates.length > 0) {
            // Use the most common date from the responses
            const dateFreq = {};
            dates.forEach(d => dateFreq[d] = (dateFreq[d] || 0) + 1);
            apiDate = Object.keys(dateFreq).reduce((a, b) => dateFreq[a] > dateFreq[b] ? a : b);
            console.log(`API date from headers: ${apiDate}`);
            console.log(`Original date headers: ${dateHeaders.join(', ')}`);
          } else {
            // Fallback: use current UTC date
            apiDate = new Date().toISOString().split('T')[0];
            console.log(`Using current date as fallback: ${apiDate}`);
          }
          
          console.log(`Total volume: ${totalVolume} for date: ${apiDate}`);
          return { volume: totalVolume, date: apiDate };
        }

        function convertToCSVDate(isoDate) {
          // Convert YYYY-MM-DD to DD/MM/YYYY
          const [year, month, day] = isoDate.split('-');
          return `${day}/${month}/${year}`;
        }

        function parseCSVDate(dateStr) {
          // Convert DD/MM/YYYY to YYYY-MM-DD
          const [day, month, year] = dateStr.split('/');
          return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        }

        function parseDate(dateStr) {
          // Parse DD/MM/YYYY for sorting
          const [day, month, year] = dateStr.split('/');
          return new Date(year, month - 1, day);
        }

        async function updateCSV() {
          const { volume: currentVolume, date: apiDate } = await getTotalVolumeWithDate();
          const csvDateStr = convertToCSVDate(apiDate);
          
          const existingData = [];
          if (fs.existsSync('perps_daily_volume.csv')) {
            await new Promise((resolve) => {
              fs.createReadStream('perps_daily_volume.csv')
                .pipe(csv())
                .on('data', (row) => existingData.push(row))
                .on('end', resolve);
            });
          }

          const dateIndex = existingData.findIndex(row => row.Date === csvDateStr);
          
          if (dateIndex >= 0) {
            const existingVolume = parseInt(existingData[dateIndex].Volume);
            if (existingVolume !== currentVolume) {
              console.log(`Updating entry for ${csvDateStr}: ${existingVolume} → ${currentVolume}`);
              existingData[dateIndex].Volume = currentVolume.toString();
            } else {
              console.log(`No change for ${csvDateStr}, volume still ${currentVolume}`);
              return { updated: false, volume: currentVolume, date: csvDateStr };
            }
          } else {
            console.log(`Adding new entry for ${csvDateStr}: ${currentVolume}`);
            existingData.push({
              Date: csvDateStr,
              Volume: currentVolume.toString()
            });
          }

          // Sort by date (newest first)
          existingData.sort((a, b) => parseDate(b.Date) - parseDate(a.Date));

          // Write back to CSV
          const writer = csvWriter.createObjectCsvWriter({
            path: 'perps_daily_volume.csv',
            header: [
              { id: 'Date', title: 'Date' },
              { id: 'Volume', title: 'Volume' }
            ]
          });

          await writer.writeRecords(existingData);
          console.log('CSV updated successfully');
          
          return { updated: true, volume: currentVolume, date: csvDateStr };
        }

        async function updateJSON() {
          console.log('Converting CSV to JSON...');
          const data = [];
          
          if (fs.existsSync('perps_daily_volume.csv')) {
            await new Promise((resolve) => {
              fs.createReadStream('perps_daily_volume.csv')
                .pipe(csv())
                .on('data', (row) => {
                  const isoDate = parseCSVDate(row.Date);
                  data.push({
                    date: isoDate,
                    volume: parseInt(row.Volume)
                  });
                })
                .on('end', resolve);
            });
          }

          // Sort by date (newest first)
          data.sort((a, b) => new Date(b.date) - new Date(a.date));
          
          const jsonOutput = {
            data: data,
            lastUpdated: new Date().toISOString(),
            totalRecords: data.length,
            source: "Jupiter v1/market-stats API",
            tokens: TOKENS
          };
          
          fs.writeFileSync('perps_daily_volume.json', JSON.stringify(jsonOutput, null, 2));
          console.log(`✅ JSON updated with ${data.length} records`);
          
          return jsonOutput;
        }

        async function main() {
          try {
            console.log('=== Jupiter Volume Update Started ===');
            
            const csvResult = await updateCSV();
            const jsonResult = await updateJSON();
            
            console.log('=== Update Summary ===');
            console.log(`Volume: ${csvResult.volume}`);
            console.log(`Date: ${csvResult.date}`);
            console.log(`CSV Updated: ${csvResult.updated}`);
            console.log(`JSON Records: ${jsonResult.totalRecords}`);
            console.log(`Data Range: ${jsonResult.data[jsonResult.data.length-1]?.date} to ${jsonResult.data[0]?.date}`);
            
          } catch (error) {
            console.error('Error in main process:', error);
            process.exit(1);
          }
        }

        main();
        EOF

        # Run the update script
        node update_volume.js

    - name: Debug files and git status
      run: |
        echo "=== CSV FILE STATUS ==="
        ls -la perps_daily_volume.csv
        echo ""
        echo "=== JSON FILE STATUS ==="
        ls -la perps_daily_volume.json
        echo ""
        echo "=== LAST 5 LINES OF CSV ==="
        tail -5 perps_daily_volume.csv
        echo ""
        echo "=== JSON METADATA ==="
        head -10 perps_daily_volume.json
        echo ""
        echo "=== GIT STATUS ==="
        git status

    - name: Check for changes
      id: git-check
      run: |
        if git diff --exit-code perps_daily_volume.csv perps_daily_volume.json; then
          echo "changed=false" >> $GITHUB_OUTPUT
        else
          echo "changed=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Commit and push changes
      if: steps.git-check.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add perps_daily_volume.csv perps_daily_volume.json
        git commit -m "Update Jupiter volume data (v1/market-stats API) - $(date -u '+%Y-%m-%d %H:%M UTC')"
        git push
        echo "✅ CSV and JSON updated and committed"
        
    - name: Summary
      if: always()
      run: |
        echo "## Jupiter Volume Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint**: v1/market-stats" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" = "success" ]; then
          echo "- **Result**: ✅ Update completed successfully" >> $GITHUB_STEP_SUMMARY
          if [ -f "perps_daily_volume.csv" ]; then
            echo "- **CSV**: Updated with latest data" >> $GITHUB_STEP_SUMMARY
            echo "- **Latest CSV Entry**: $(tail -1 perps_daily_volume.csv)" >> $GITHUB_STEP_SUMMARY
          fi
          if [ -f "perps_daily_volume.json" ]; then
            echo "- **JSON**: Generated with structured data" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "- **Result**: ❌ Update failed - check logs" >> $GITHUB_STEP_SUMMARY
        fi